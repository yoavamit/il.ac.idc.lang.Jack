/*
* generated by Xtext
*/
package il.ac.idc.lang.ui.contentassist;

import java.util.Set;

import il.ac.idc.lang.jack.ClassDef;
import il.ac.idc.lang.jack.SubroutineBody;
import il.ac.idc.lang.jack.SubroutineDecl;
import il.ac.idc.lang.jack.VarDecl;
import il.ac.idc.lang.util.JackBuiltinLibraries;
import il.ac.idc.lang.util.JackFunction;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
public class JackProposalProvider extends il.ac.idc.lang.ui.contentassist.AbstractJackProposalProvider {

    @Override
    public void complete_LetStatement(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        EList<VarDecl> declarations = getSubroutineVariables(model);
        String prefix = context.getPrefix();
        for (VarDecl var : declarations) {
            if(var.getVarName().startsWith(prefix)) {
                acceptor.accept(createCompletionProposal(var.getVarName(), context));
            }
            for (String addVar : var.getAdditionalVarNames()) {
                if (addVar.startsWith(prefix)) {
                    acceptor.accept(createCompletionProposal(addVar, context));
                }
            }
        }
        super.complete_LetStatement(model, ruleCall, context, acceptor);
    }

    @Override
    public void complete_SubroutineCall(EObject model, RuleCall ruleCall,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        EList<SubroutineDecl> subtourines = getSubroutines(model);
        String prefix = context.getPrefix();
        for (SubroutineDecl subroutineDecl : subtourines) {
            if (subroutineDecl.getSubroutineName().startsWith(prefix)) {
                acceptor.accept(createCompletionProposal(subroutineDecl.getSubroutineName(), context));
            }
        }
        Set<JackFunction> funcs = JackBuiltinLibraries.findFunctionPrefix(prefix);
        for (JackFunction jackFunction : funcs) {
            acceptor.accept(createCompletionProposal(jackFunction.getSignature(), context));
        }
        super.complete_SubroutineCall(model, ruleCall, context, acceptor);
    }

    @Override
    public void completeTerm_VarAccessExpr(EObject model,
            Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        super.completeTerm_VarAccessExpr(model, assignment, context, acceptor);
    }
    
    private EList<VarDecl> getSubroutineVariables(EObject model) {
        EObject parent = model.eContainer();
        while (!(parent instanceof SubroutineBody)) {
            parent = parent.eContainer();
        }
        
        return ((SubroutineBody)parent).getVariables();
    }

    private EList<SubroutineDecl> getSubroutines(EObject model) {
        EObject parent = model.eContainer();
        while (!(parent instanceof ClassDef)) {
            parent = parent.eContainer();
        }
        
        return ((ClassDef)parent).getRoutines();
    }
}
